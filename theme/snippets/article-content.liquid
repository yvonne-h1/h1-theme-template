{% comment %} Capture related products {% endcomment %}
{%- liquid
  assign has_products_placeholder = false
  assign render_inline = false

  # Logic to render the article content. We have to check for as many possibilities as possible because it might cause divs to not be closed after replacing content
  if article.content contains '[products]'
    assign render_inline = true
    if article.content contains '<div><p>[products]</p></div>'
      assign has_products_placeholder = '<div><p>[products]</p></div>'
    elsif article.content contains '<p>[products]</p>'
      assign has_products_placeholder = '<p>[products]</p>'
    elsif article.content contains '<div><span>[products]</span></div>'
      assign has_products_placeholder = '<div><span>[products]</span></div>'
    elsif article.content contains '<div>[products]</div>'
      assign has_products_placeholder = '<div>[products]</div>'
    elsif article.content contains '<span>[products]</span>'
      assign has_products_placeholder = '<span>[products]</span>'
    elsif article.content contains '[products]'
      assign has_products_placeholder = '[products]'
    endif
  endif

  assign products_display = 'slider'

  for block in section.blocks
    case block.type
      when 'featured_products'
        if article.metafields.article.article_products != blank
          assign products_arr = article.metafields.article.article_products.value

          if block.settings.products_display == 'grid'
            assign products_display = 'grid'
          endif

          if has_products_placeholder and products_display == 'grid'
            assign image_sizes = '(min-width: 1024px) 33vw, (min-width: 580px) 50vw, 100vw'
          endif

          assign default_grid_classes = 'grid grid-cols-1 sm:grid-cols-2 gap-base'
          assign grid_classes = default_grid_classes | append: ' lg:grid-cols-3'
          if products_display == 'grid'
            assign grid_classes = default_grid_classes | append: ' md:grid-cols-3 lg:grid-cols-4'
          endif

          capture featured_products_content
            if products_display == 'slider'
              # Slider
              render 'swiper-content', render_products: true, object_array: products_arr, render_inline: render_inline, swiper_indication: block.settings.swiper_indication, swiper_navigation: block.settings.swiper_navigation, swiper_autoplay: block.settings.swiper_autoplay, swiper_autoplay_delay: block.settings.swiper_autoplay_delay, id: section.id
            else
              # Grid
              echo grid_classes | prepend: '<ul class="' | append: '">'
              for product_item in products_arr
                echo '<li style="--animation-delay: ' | append: forloop.index | append: '">'
                render 'product-card', product_object: product_item, image_max_width: image_max_width, image_sizes: image_sizes, product_card_title_el: 'h3'
                echo '</li>'
              endfor
              echo '</ul>'
            endif
          endcapture
        endif

        # Container class
        assign container_class_products = 'overflow-hidden'

        if block.settings.color_scheme != blank
          assign container_class_products = container_class_products | append: ' container--background my-0 group/color-scheme ' | append: block.settings.color_scheme
        endif

        assign container_title = block.settings.title
    endcase
  endfor
-%}

{%- comment -%} Capture container content {%- endcomment -%}
{%- capture container_content -%}

  {% comment %} If the article content contains a placeholder for products, render the carousel there instead {% endcomment %}
  {%- if featured_products_content != blank and render_inline -%}
    {%- assign article_parts = article.content | split: has_products_placeholder -%}

    <div class="mb-10 mt-4">{{ article_parts[0] }}</div>
    {{- featured_products_content -}}
    <div class="mt-10">{{ article_parts[1] }}</div>
  {%- else -%}
    {% comment %} # remove the placeholder and wrap the content {% endcomment %}
    <div class="mb-10 mt-4">
      {{ article.content }}
    </div>
  {%- endif -%}
{%- endcapture -%}

{%- assign container_class = class | append: ' article-content ' -%}

{%- comment -%} Render the content {%- endcomment -%}
{%- render 'render-container-content', content: container_content, class: container_class, content_class: 'rte max-w-content-width-md' -%}

{% comment %} If there is no placeholder in the content, render the product slider below the content {% endcomment %}
{%- liquid
  if featured_products_content != blank
    unless has_products_placeholder != false and article.content contains has_products_placeholder
      # Render the content
      if products_display == 'slider'
        assign content_class = 'p-0'
      endif
      render 'render-container-content', class: container_class_products, content_class: content_class, content: featured_products_content, title: container_title
    endunless
  endif
-%}
