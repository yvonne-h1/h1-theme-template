{%- comment -%}
  Files must meet the following requirements:
    https://help.shopify.com/en/manual/shopify-admin/productivity-tools/file-uploads

  # Parameters:
    image_object:       { Object }  | Required  | Image object to render the image from
    aspect_ratio:       { String }  | Optional  | When no value or false is given, defaults to the original image aspect ratio.
                                                  For example: '16/9' or '4/3'
    crop:               { String }  | Optional  | Defaults to 'center'. Set to 'center / top / left / right / bottom' to crop the image with the specified size. Requires both height and width in image_size
    sizes:              { String }  | Optional  | Defaults to '100vw', can be used to get screen widths and load proportional images
                                                  For example: (min-width: 1200px) 600px, 100vw
                                                  Example meaning: 600 pixels from 1200 pixels screen width onwards, fallback for the image is always 100vw
    widths:             { String }  | Optional  | Defaults to value that can be seen below
    max_width           { Integer } | Optional  | Gives the maximum width of the image in 1dpr, for example if it never becomes wider than 300 pixels, prevent loading any bigger sources, keep DOM size small
    alt                 { String }  | Optional  | Set the image alt
    title               { String }  | Optional  | Set the image title
    class               { String }  | Optional  | Set classname(s) for the image
    figcaption          { String }  | Optional  | Set a figure caption
                                                  When you add a picture caption, the <img> is automatically wrapped with a figure tag

  # Figure parameters
    figure_class        { String }  | Optional | Set classname(s) for the figure

    Example usage:
    {%- render 'responsive-image',
      image_object: section.settings.image,
      aspect_ratio: '16/9',
      crop: 'center',
      sizes: '(min-width: 1200px) 1200px, 100vw'
    -%}
{%- endcomment -%}

{% capture fallback_image %}
  <div class="svg flex items-center justify-center text-accent {{ class -}}" style="{{- style -}}">
    {{- 'image' | placeholder_svg_tag -}}
  </div>
{% endcapture %}

{%- liquid
  if class
    unless class contains 'object-cover'
      assign class = class | append: ' object-contain'
    endunless
  else
    assign class = 'object-contain'
  endif

  # Fallback image
  if image_object == blank
    echo fallback_image

    # Break here so that the rest has no impact on page speed
    break
  endif

  # Global assigns
  assign shopify_max = 4472
  assign width = image_object.width

  unless aspect_ratio
    assign image_ratio = image_object.aspect_ratio
    assign custom_aspect_ratio = false
  else
    assign aspect_width = aspect_ratio | split: '/' | first | times: 1.0
    assign aspect_height = aspect_ratio | split: '/' | last | times: 1.0
    assign image_ratio = aspect_width | divided_by: aspect_height | abs
    assign style = 'aspect-ratio: ' | append: aspect_ratio | append: ';'
    assign custom_aspect_ratio = true
  endunless

  assign is_square = false
  assign is_landscape = false
  assign is_portrait = false

  if aspect_width == aspect_height
  elsif aspect_width > aspect_height

  elsif aspect_height > aspect_width

  endif

  # Shopify adds lazy by default, so only overwrite when you pass the lazy parameter, like in sliders with multiple slides
  assign lazy_load = 'eager'
  if lazy != blank and lazy == true
    assign lazy_load = 'lazy'
  endif

  # Image sizes
  unless sizes
    assign sizes = '100vw'
  endunless

  # Image crop
  unless 'center,top,bottom,left,right' contains crop
    assign crop = 'center'
  endunless

  # Image alt
  if alt == blank
    assign alt = image_object.alt

    if alt == blank
      assign alt = ''
    endif
  endif

  # Image title
  if title == blank
    assign title = image_object.title
  endif

  # min width to render sizes from, used for responsive images
  if min_width != blank
    assign min_width = min_width | times: 1
  else
    assign min_width = 0
  endif

  # If max_width is empty, then set the Shopify max
  unless max_width
    assign max_width = shopify_max

    # If the max_width is not empty, multiply it by 2 to support 2 DPR
  else
    assign max_width_times_two = max_width | times: 2

    # Check if the multiplied value is within the Shopify max
    if max_width_times_two <= shopify_max
      assign max_width = max_width | times: 2

      # If not, then grab the Shopify max
    else
      assign max_width = shopify_max
    endif
  endunless

  if max_width > width
    assign max_width = width
  endif

  # Image widths
  unless widths
    assign widths = '320, 360, 375, 420, 480, 520, 600, 680, 768, 850, 960, 1080, 1200, 1280, 1440, 1536, 1600, 1920, 2048, 2560, 2880, 4000'
  endunless

  # When smaller images are needed
  if prepend_widths
    assign widths = widths | prepend: ', ' | prepend: prepend_widths
  endif

  # If the width is less than 320, just output that size to avoid errors. 2 times is not possible since the image isn't bigger than this size.
  if width < 320
    assign widths = width

    # Check if there is a max width and if it's lower then the actual image
    if max_width < width
      # Create a times 2 width to see if it can handle 2 DPR with the actual image width
      assign max_width_times_two = max_width | times: 2

      # If so create an array with the max width and the 2 DPR support
      if max_width_times_two <= width
        assign widths = max_width | append: ', ' | append: max_width_times_two

        # Else just assign the max width as width
      else
        assign widths = max_width
      endif
    endif
  endif

  # Create an array of the image widths
  assign widths_arr = widths | handleize | split: '-'

  for width_item in widths_arr
    assign width_int = width_item | plus: 0
    assign width = width_int

    if width_int < min_width
      continue
    endif

    # on the last item for the widths
    if image_object.width >= width_int
      if width_int > max_width
        assign width = max_width
      endif
      assign new_widths = new_widths | append: ',' | append: width
    else
      assign new_widths = new_widths | append: ',' | append: image_object.width
    endif

    assign image_url = image_object | image_url: width: width, crop: crop
    assign height = width | divided_by: image_ratio | round

    if width_int > max_width
      break
    endif
  endfor

  assign widths = new_widths | remove_first: ','
-%}

{%- capture image_element -%}
  {% comment %} We force lazy loading parameter {% endcomment %}
  {%- if lazy != blank -%}
    {{ image_url | image_tag:
      alt: alt,
      class: class,
      loading: lazy_load,
      height: height,
      sizes: sizes,
      style: style,
      title: title,
      width: width,
      widths: widths,
      data-custom-aspect-ratio: custom_aspect_ratio
    }}
  {%- else -%}
    {% comment %} Let Shopify determine lazy loading {% endcomment %}
    {{ image_url | image_tag:
      alt: alt,
      class: class,
      height: height,
      sizes: sizes,
      style: style,
      title: title,
      width: width,
      widths: widths,
      data-custom-aspect-ratio: custom_aspect_ratio
    }}
  {%- endif -%}
{%- endcapture -%}

{%- if figcaption == blank -%}
  {{ image_element }}
{%- else -%}
  <figure
    {% if figure_class != blank %}
      class="{{- figure_class -}}"
    {% endif %}>
    {{ image_element }}
    <figcaption>
      {{- figcaption -}}
    </figcaption>
  </figure>
{%- endif -%}
